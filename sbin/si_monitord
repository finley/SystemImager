#!/bin/bash
#
#   vi:set filetype=bash: 
#
#    This file is part of SystemImager.
#
#    SystemImager is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    SystemImager is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with SystemImager. If not, see <https://www.gnu.org/licenses/>.
#
#    Copyright (C) 2019 Olivier Lahaye
#
#   2019.09.18 Olivier Lahaye
#   - Initial release
#
#   si_monitord is the replacement of old si_monitor
#
#   Function:
#     - si_monitord will run on image server.
#     - it is responsible for:
#       - registering new clients
#       - recording clients logs
# 
#   Files:
#     - /var/log/systemimager/si_monitord.log               : this server log
#     - /var/lib/systemimager/clients/<client MAC>_log.json : The logs for client with this MAC addr.
#     - /var/lib/systemimager/clients/<client MAC>_def.json : The definitions and status for client with this MAC addr.
#
#    Variables (default value):
#     - MONITOR_LOGFILE (/var/log/systemimager/si_monitord.log)
#     - MONITOR_PORT (8181)
#     - MONITOR_LOGLEVEL (O-5; defaults to 1)
#
#   Protocol:
#     - MAC:<Client MAC addr>;<client uptime>
#       => Use when log monitor starts on client. It is the 1st message received.
#          The uptime will be substracted from server timestamp in order to compute
#          the 1st timestamp (when client imager kernel went alive).
#     - UPD:{json client informations update (status, ...)}
#       => These are the same informations as displayed in old si_monitortk
#     - LOG:{ json basic syslog values (tag, priority and message)}
#       => A new log line

function SystemImagerMonitor() {
	while IFS=':' read -r TYPE MSG
	do
		case "$TYPE" in
			LOG)
				# BUG: if $LOG_FILE is undefined: try to read MAC (though it's not normal situation)
				if test -e "$DEF_FILE"
				then
					echo -E "$MSG" >> $LOG_FILE
				else
					echo "BUG: Client definition file [$DEF_FILE] does not exists." >> ${MONITOR_LOGFILE}
				fi
				;;
			UPD)
				if test -z "$DEF_FILE" # Upon reboot, we recieve upda for rebooted status as 1st CMD.
				then                   # In this case, the def file must be already existing.
					MAC=$(echo -E "$MSG" |jq -j ".name")
					if test -z "$MAC"
					then
						echo "BUG: received update with no MAC addr while it is a new connection."
						echo "BUG: Message was: [$MSG]"
					else
						DEF_FILE=${CLIENTS_DB_DIR}/${MAC}_def.json
						if test ! -e "$DEF_FILE"
						then
							echo "BUG: Updagte received for non-existing $DEF_FILE file."
						fi
					fi
				fi

				if test -e "$DEF_FILE"
				then
					# take old def file that has 1st timestamp, add MSG update and update timestamp.
					# Done in 2 step: 1: read old file
					# create it using redirection. (if done in one shot, redirection kills the file before car reads it)
					OLD=$(cat ${DEF_FILE}) 
					echo $OLD $MSG '{ "timestamp" : "'$(date +%s)'" }'| jq -s add > $DEF_FILE
				else
					echo "BUG: Client definition file [$DEF_FILE] does not exists." >> ${MONITOR_LOGFILE}
				fi
				;;
			MAC)
				IFS=';' read MAC UPTIME <<< "${MSG}"
				if test -n "$MAC"
				then
					LOG_FILE=${CLIENTS_DB_DIR}/${MAC}_log.json
					DEF_FILE=${CLIENTS_DB_DIR}/${MAC}_def.json
					TIMESTAMP=$(date +%s)
					FIRST_TIMESTAMP=$(( ${TIMESTAMP} - ${UPTIME} ))
					echo "INFO: Log retreiving started for $MAC." >> ${MONITOR_LOGFILE}
					rm -f $LOG_FILE 2> /dev/null # remove old log
					jq . > ${DEF_FILE} <<-EOF
						{
							  "name" : "$MAC",
							  "timestamp" : "$TIMESTAMP",
							  "first_timestamp" : "$FIRST_TIMESTAMP"
						}
					EOF
				else
					echo "ERROR: Empty MAC addr received on $(date)" >> ${MONITOR_LOGFILE}
					exit 0
				fi
				;;
			*)
				echo "ERROR: Invalid or empty message [$TYPE] on $(date)" >> ${MONITOR_LOGFILE}
				;;
		esac
	done
	# echo "{ \"END\" : \"1\" }" >> $LOG_FILE
}

# Read config from general config file.
MONITOR_LOGFILE="$(cat /etc/systemimager/systemimager.json |jq -j '.monitor.log_file')"
if test ! -d "${MONITOR_LOGFILE%/*}"
then
	logger -t systemimager -p local0.err "monitor_logfile: wrong path: ${MONITOR_LOGFILE%/*}. Defaulting to /var/log/systemimager/si_monitord.log"
	unset MONITOR_LOGFILE
fi

MONITOR_PORT="$(cat /etc/systemimager/systemimager.json |jq -j '.monitor.port')"
if test -z "${MONITOR_PORT##*[!0-9]*}" # Ok is only integers. (TODO: Add valid port range checking)
then
	logger -t systemimager -p local0.err "monitor_port: must be an integer: $MONITOR_PORT. Defaulting to 8181."
	unset MONITOR_PORT
fi

MONITOR_LOGLEVEL="$(cat /etc/systemimager/systemimager.json |jq -j '.monitor.log_level')"
if ! test -z "${MONITOR_LOGLEVEL#[0-5]}" # Ok if empty of nulmber between 0 and 5.
then
	logger -t systemimager -p local0.err "monitor_loglevel: ($MONITOR_LOGLEVEL) must be an integer between 0 and 5. Defaulting to 0 (zero)."
	unset MONITOR_LOGLEVEL
fi

CLIENTS_DB_DIR="$(cat /etc/systemimager/systemimager.json |jq -j '.monitor.clients_db_dir')"
if test ! -d "${CLIENTS_DB_DIR}"
then
        logger -t systemimager -p local0.err "clients_db_dir: wrong path: ${CLIENTS_DB_DIR}. Defaulting to /var/lib/systemimager/clients"
        CLIENTS_DB_DIR=/var/lib/systemimager/clients
fi


VERBOSITY="-d -v -d -d -d" # LOGLEVEL (1 to 5) tels how much -d or -v options we use.
LOG_OPTIONS="${VERBOSITY:0:3*${MONITOR_LOGLEVEL:=0}} -lf ${MONITOR_LOGFILE:=/var/log/systemimager/si_monitord.log}"

export MONITOR_LOGFILE 
export CLIENTS_DB_DIR
export -f SystemImagerMonitor

socat $LOG_OPTIONS -u TCP-LISTEN:${MONITOR_PORT:=8181},crlf,reuseaddr,fork SYSTEM:"/bin/bash -c 'SystemImagerMonitor'"

