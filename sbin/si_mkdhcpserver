#!/usr/bin/perl -w
#
#    vi:set filetype=perl:
#
#    This file is part of SystemImager.
#
#    SystemImager is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    SystemImager is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with SystemImager. If not, see <https://www.gnu.org/licenses/>.
#
#    Copyright (C) 1999-2019 Brian Elliott Finley <brian@thefinleys.com>
#    Copyright (C) 2002-2003 Bald Guy Software
#
#    Others who have contributed to this code (in alphabetical order):
#     John Goebel <jgoebel@valinux.com>
#     Curtis Zinzilieta <czinzilieta@valinux.com>
#     Olivier Lahaye <olivier.lahaye@cea.fr>
#
#    See http://www.iana.org/assignments/bootp-dhcp-parameters for info on
#    custom option numbers.
#
 
use strict;
use SystemImager::Common;
use SystemImager::HostRange;
use vars qw($VERSION);

# set some variables
$VERSION="SYSTEMIMAGER_VERSION_STRING";
my $program_name="si_mkdhcpserver";
my $get_help = "  Try \"$program_name -help\" for more options.";


my $version_info = <<"EOF";
$program_name (part of SystemImager) version $VERSION

Copyright (C) 2019 Brian Elliott Finley <brian\@thefinleys.com>
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF

# set help information
my $help_info = $version_info . <<"EOF";

Usage: $program_name

Download, report bugs, and make suggestions at:
http://systemimager.org/
EOF

SystemImager::Common->check_if_root();



### BEGIN variable for parts of the dhcpd.conf file ###
my $header = <<'EOF';
#
# "SystemImager" 
#
#  Copyright (C) 1999-2019 Brian Elliott Finley <brian@thefinleys.com>
#  Copyright (C) 2002 Bald Guy Software
#
#  This file was created with "si_mkdhcpserver", which is part of SystemImager.
#  See http://systemimager.org/ for more information.
#
EOF


# associated configs for the dhcpd.conf file
my $dhcpd_conf_v3_part1 = <<"EOF";
# This is an ISC DHCP v3 configuration file.

# general options
authoritative;
ddns-update-style none;

EOF


my $dhcpd_conf_v3_part2 = <<"EOF";

# set lease time to infinite (-1)
default-lease-time -1;

# Uncomment one of the two following lines.  The first, if you need to
# boot i386 clients, or the second for booting ia64 clients.
filename "pxelinux.bin";   # i386
#filename "elilo.efi";   # ia64

EOF

#XXX include elilo.efi and elilo.conf in systemimager bundle.  Also include pxelinux.bin, methinks. -BEF-

my $dhcpd_conf_v2_part1 = <<'EOF';
# This is an ISC DHCP v2 configuration file.

# set lease time to infinite (-1)
default-lease-time -1;

# Uncomment one of the two following lines.  The first, if you need to
# boot i386 clients, or the second for booting ia64 clients.
filename "pxelinux.bin";   # i386
#filename "elilo.efi";   # ia64

EOF

### END variables for parts of dhcpd.conf file ###



# if not run as root, this script will surely fail
unless($< == 0) { die "Must be run as root!\n"; }

system("clear");

# give warning
print <<"EOF";
Welcome to the SystemImager "si_mkdhcpserver" command.  This command will
prepare this computer to be a DHCP server by creating a dhcpd.conf file
for use with your ISC DHCP server (v2 or v3).

If there is an existing file, it will be backed up with the 
.beforesystemimager extension.

EOF

print "Continue? (y/[n]): ";
my $continue=<STDIN>;
chomp $continue;
($continue eq "y") or die "\n$program_name No files were modified.\n";


# set some default values
my $dhcpd_conf = "/etc/dhcp/dhcpd.conf";
my $dhcpd_version = "0";
print "Trying to probe your DNS domain. Please wait...";
my $dnsdomainname = `dnsdomainname`;
chomp $dnsdomainname;
my $netnumber = "192.168.1.0";
my $netmask = "";
my $rangebegin = "";
my $rangeend = "";
my $dnsserver1 = "";
my $dnsserver2 = "";
my $dnsserver3 = "";
my $log_server = "";
my $log_server_port = "";
my $router = "";
my $imageserver = "";
my $boot_server = "";
my $ssh_download_url = "";
my $flamethrower_directory_portbase = "";
my $tmpfs_staging = "n";
my $mcast_install = "n";
my $swallow = "";

# Oh where oh where could my dhcpd.conf file be?
my @dhcpd_conf_file_locations_du_jour = ( 
    "/etc/dhcp/dhcpd.conf",
    "/etc/dhcp3/dhcpd.conf",
    "/etc/dhcpd.conf"
);
foreach my $file (@dhcpd_conf_file_locations_du_jour) {
    # does *this* one exist?
    if( -e $file ) { 
        $dhcpd_conf = $file;
        last;
    }
}
#
# Find dhcpd version
if( -x '/usr/sbin/dhcpd' ) {
    my $dhcpd_version=`/usr/sbin/dhcpd --version 2>&1`;
    my @dhcp_major= $dhcpd_version =~ /(\d+)/ ;
    $dhcpd_version = $dhcp_major[0];
} else {
    print "Can't run '/usr/sbin/dhcpd -v' to check dhcp server version. Assuming v3."
}

### Begin questionnaire ###
my $satisfied = "n";
while ($satisfied ne "y") {
 system("clear");
 print << "EOF";
Type your response or hit <Enter> to accept [defaults].  If you don't
have a response, such as no first or second DNS server, just hit 
<Enter> and none will be used.

EOF

    # Query for dhcpd version only if we were unable to determine installed version.
    if ( "$dhcpd_version" eq "0" ) {
        $dhcpd_version = 3; # defaults to 3
        print "What is your DHCP daemon major version number (2 or 3)? [$dhcpd_version]: ";
        $dhcpd_version = get_response($dhcpd_version);
    }

    print "What is the name of your DHCP daemon config file? [$dhcpd_conf]: ";
    $dhcpd_conf = get_response($dhcpd_conf);
   
    print "What is your domain name? [$dnsdomainname]: ";
    $dnsdomainname = get_response($dnsdomainname);
   
    print "What is your network number? [$netnumber]: ";
    $netnumber = get_response($netnumber);
    my $hex_netnumber = hex(SystemImager::HostRange::ip2hex($netnumber));

    # Propose a valid netmask.
    if ($hex_netnumber < hex(SystemImager::HostRange::ip2hex('128.0.0.0'))) {
        # Class A #
        $netmask = '255.0.0.0';
    } elsif ($hex_netnumber < hex(SystemImager::HostRange::ip2hex('192.0.0.0'))) {
        # Class B #
        $netmask = '255.255.0.0';
    } elsif ($hex_netnumber < hex(SystemImager::HostRange::ip2hex('224.0.0.0'))) {
        # Class C #
        $netmask = '255.255.255.0';
    } else {
        # Class E and invalid => propose a class C netmask.
        $netmask = '255.255.255.0';
    }

    print "What is your netmask? [$netmask]: ";
    $netmask = get_response($netmask);
    my $hex_netmask = hex(SystemImager::HostRange::ip2hex($netmask));

    # Try to auto-detect host min and host max.
    $rangebegin = SystemImager::HostRange::hex2ip(
                      sprintf("%08X", (($hex_netnumber & $hex_netmask) + 1))
                  );
    $router =
    $imageserver = 
    $boot_server = 
    $rangeend = SystemImager::HostRange::hex2ip(
                    sprintf("%08X",
                        (($hex_netnumber & $hex_netmask) |
			 (~$hex_netmask) & 0xffffffff) - 1
                    )
                );
   
    print "What is the starting IP address for your dhcp range? [$rangebegin]: ";
    $rangebegin = get_response($rangebegin);
   
    print "What is the ending IP address for your dhcp range? [$rangeend]: ";
    $rangeend = get_response($rangeend);
   
    print "What is the IP address of your first DNS server? [$dnsserver1]: ";
    $dnsserver1 = get_response($dnsserver1);
   
    if ($dnsserver1) {
      print "What is the IP address of your second DNS server? [$dnsserver2]: ";
      $dnsserver2 = get_response($dnsserver2);
    }
   
    if ($dnsserver2) {
      print "What is the IP address of your third DNS server? [$dnsserver3]: ";
      $dnsserver3=get_response($dnsserver3);
    }
   
    print "What is the IP address of your default gateway? [$router]: ";
    $router=get_response($router);
   
    print "What is the IP address of your image server? [$imageserver]: ";
    $imageserver=get_response($imageserver);
   
    print "What is the IP address of your boot server? [$boot_server]: ";
    $boot_server = get_response($boot_server);
   
    print "What is the IP address of your log server? [$log_server]: ";
    $log_server = get_response($log_server);
   
    if($log_server) {
        print "If your log server uses a non-standard port, enter it here: [$log_server_port]: ";
        $log_server_port = get_response($log_server_port);
    }
   
    print qq/Use tmpfs staging on client?  (If unsure, choose "n") [$tmpfs_staging]: /;
    $tmpfs_staging = get_response($tmpfs_staging);
    $tmpfs_staging = lc $tmpfs_staging;
    if("$tmpfs_staging" eq "y") {
        $tmpfs_staging = "yes";
    }
   
    print "Do you want to use Flamethrower (multicast) to install your clients? [$mcast_install]: ";
    $mcast_install = get_response($mcast_install);
    if ($mcast_install eq "y") {
        if ($flamethrower_directory_portbase eq "") { $flamethrower_directory_portbase="9000"; }
        print "On which port is your Flamethrower directory? [$flamethrower_directory_portbase]: ";
        $flamethrower_directory_portbase = get_response($flamethrower_directory_portbase);
    }
   
    # see http://www.armory.com/swallowscenes.html for details
    print "\nWhat... is the air-speed velocity of an unladen swallow? [$swallow]: ";
    $swallow=<STDIN>;
    system("clear");
    chomp $swallow;
    $swallow = lc $swallow;
    if($swallow =~ /african/) {
     print "Aaaaaaaaaaaaaaaaaaaaaaaaaaaah!\n";
    } else {
     print "Wrong!!! (with a Monty Python(TM) accent...)\n";
    }
    print "\nPress <Enter> to continue...";
    <STDIN>;
   
    system("clear");
    print "Ahh, but seriously folks...\n";
    print "Here are the values you have chosen:\n\n";
    print "#######################################################################\n";
    print "ISC DHCP daemon version:                  $dhcpd_version\n";
    print "ISC DHCP daemon config file:              $dhcpd_conf\n";
    print "DNS domain name:                          $dnsdomainname\n";
    print "Network number:                           $netnumber\n";
    print "Netmask:                                  $netmask\n";
    print "Starting IP address for your DHCP range:  $rangebegin\n";
    print "Ending IP address for your DHCP range:    $rangeend\n";
    print "First DNS server:                         $dnsserver1\n";
    print "Second DNS server:                        $dnsserver2\n";
    print "Third DNS server:                         $dnsserver3\n";
    print "Default gateway:                          $router\n";
    print "Image server:                             $imageserver\n";
    print "Boot server:                              $boot_server\n";
    print "Log server:                               $log_server\n";
    print "Log server port:                          $log_server_port\n";
    print "Flamethrower directory port:              $flamethrower_directory_portbase\n";
    print "Use tmpfs staging on client:              $tmpfs_staging\n";
    print "SSH files download URL:                   $ssh_download_url\n";
    print "#######################################################################\n";
    
    print "\nAre you satisfied? (y/[n]): ";
    $satisfied=<STDIN>;
    chomp $satisfied;
}

### End questionnaire ###


# backup dhcpd.conf if necessary
if( -e "$dhcpd_conf" && ! -e "${dhcpd_conf}.beforesystemimager") { 
 rename("$dhcpd_conf", "${dhcpd_conf}.beforesystemimager");
}

# open dhcpd.conf for writing
open(DHCPDCONF, "> $dhcpd_conf") || die "Couldn't open $dhcpd_conf for writing: $!\n";
print DHCPDCONF $header;

# create a configuration file, depending on which version of dhcpd we found
if ($dhcpd_version eq "2") {
    # version 2, at least for now
    print DHCPDCONF $dhcpd_conf_v2_part1;
  
    print DHCPDCONF qq(subnet $netnumber netmask $netmask { \n);
    print DHCPDCONF qq(  range  $rangebegin $rangeend; \n);
    print DHCPDCONF qq(  option domain-name "$dnsdomainname"; \n);

    if($dnsserver1 ne "") { 
        print DHCPDCONF qq(  option domain-name-servers $dnsserver1); 
    } else {
        print DHCPDCONF qq(  #option domain-name-servers <my_name_server_ip_address>); 
    }
    if($dnsserver2 ne "") { 
        print DHCPDCONF qq(, $dnsserver2);
    }
    if($dnsserver3 ne "") { 
        print DHCPDCONF qq(, $dnsserver3);
    }
    print DHCPDCONF qq(;\n);

    print DHCPDCONF qq(  option routers $router; \n);

    print DHCPDCONF qq(  # option-140 specifies the IP address of your SystemImager image server\n);
    print DHCPDCONF qq(  option option-140 ) . $imageserver . qq(; \n);
  
    print DHCPDCONF qq(  # option-142 specifies the URL address of your ssh download\n);
    print DHCPDCONF qq(  # This should be in the format of "http://$imageserver/systemimager/boot/".\n);
    if($ssh_download_url eq "") { 
        print DHCPDCONF qq(  #option option-142 "http://$imageserver/systemimager/boot/"; \n);
    } else {
        print DHCPDCONF qq(  option option-142 "$ssh_download_url"; \n);
    }

    print DHCPDCONF qq(  # option-143 specifies the Flamethrower directory port.\n);
    print DHCPDCONF qq(  # The default is "9000".\n);
    if($flamethrower_directory_portbase eq "") { 
        print DHCPDCONF qq(  #option option-143 "9000"; \n);
    } else {
        print DHCPDCONF qq(  option option-143 "$flamethrower_directory_portbase"; \n);
    }

    option_144($tmpfs_staging);

    print DHCPDCONF qq(  # next-server is your network boot server\n);
    if($boot_server eq "") { 
        print DHCPDCONF qq(  #next-server $boot_server; \n);
    } else {
        print DHCPDCONF qq(  next-server $boot_server; \n);
    }

    print DHCPDCONF qq(\n  # log-servers\n);
    if($log_server eq "") { 
        print DHCPDCONF qq(  #option log-servers $log_server; \n);
    } else {
        print DHCPDCONF qq(  option log-servers $log_server; \n);
    }

    print DHCPDCONF qq(  # option-141 is the port number your log server uses\n);
    if($log_server_port eq "") { 
        print DHCPDCONF qq(  #option-141 "$log_server_port"; \n);
    } else {
        print DHCPDCONF qq(  option-141 "$log_server_port"; \n);
    }

    print DHCPDCONF qq(} \n);
  
} else {
    # version 3, at least for now
    print DHCPDCONF $dhcpd_conf_v3_part1;
  
    print DHCPDCONF qq(# Imageserver\n);
    print DHCPDCONF qq(option option-140 code 140 = ip-address;\n);
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# log_server_port\n);
    print DHCPDCONF qq(option option-141 code 141 = unsigned integer 16;\n);
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# ssh_download_url\n);
    print DHCPDCONF qq(option option-142 code 142 = string;\n);
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# flamethrower_directory_portbase\n);
    print DHCPDCONF qq(option option-143 code 143 = unsigned integer 16;\n);
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# tmpfs_staging\n);
    print DHCPDCONF qq(option option-144 code 144 = string;\n);
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# option-140 is the IP address of your SystemImager image server\n);
    print DHCPDCONF qq(option option-140 ) . $imageserver . qq(;\n);
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# option-142 specifies the URL address of your ssh download\n);
    print DHCPDCONF qq(# This should be in the format of "http://$imageserver/systemimager/boot/".\n);
    if($ssh_download_url eq "") { 
        print DHCPDCONF qq(#option option-142 "http://$imageserver/systemimager/boot/"; \n);
    } else {
        print DHCPDCONF qq(option option-142 "$ssh_download_url"; \n);
    }
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# option-143 specifies the Flamethrower directory port.\n);
    print DHCPDCONF qq(# The default is "9000".\n);
    if($flamethrower_directory_portbase eq "") { 
        print DHCPDCONF qq(#option option-143 "9000"; \n);
    } else {
        print DHCPDCONF qq(option option-143 "$flamethrower_directory_portbase"; \n);
    }
    print DHCPDCONF qq(\n);

    option_144($tmpfs_staging);

    print DHCPDCONF qq(# next-server is your network boot server\n);
    if($boot_server eq "") { 
        print DHCPDCONF qq(#next-server 1.2.3.4; \n);
    } else {
        print DHCPDCONF qq(next-server $boot_server; \n);
    }
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# log-servers\n);
    if($log_server eq "") { 
        print DHCPDCONF qq(#option log-servers 1.2.3.4; \n);
    } else {
        print DHCPDCONF qq(option log-servers $log_server; \n);
    }
    print DHCPDCONF qq(\n);

    print DHCPDCONF qq(# option-141 is the port number your log server uses\n);
    if($log_server_port eq "") { 
        print DHCPDCONF qq(#option option-141 514; \n);
    } else {
        print DHCPDCONF qq(option option-141 $log_server_port; \n);
    }
    print DHCPDCONF qq(\n);

    print DHCPDCONF $dhcpd_conf_v3_part2;
   
    print DHCPDCONF qq(subnet $netnumber netmask $netmask { \n);
    print DHCPDCONF qq(  range  $rangebegin $rangeend; \n);
    print DHCPDCONF qq(  option domain-name "$dnsdomainname"; \n);
    if($dnsserver1 ne "") { print DHCPDCONF qq(  option domain-name-servers $dnsserver1); }
    if($dnsserver2 ne "") { print DHCPDCONF qq(, $dnsserver2); }
    if($dnsserver3 ne "") { print DHCPDCONF qq(, $dnsserver3); }
    if($dnsserver1 ne "") { print DHCPDCONF qq(;\n); }
    print DHCPDCONF qq(  option routers $router; \n);
    print DHCPDCONF qq( } \n);

}


# close and chmod the new dhcpd.conf file
close(DHCPDCONF);
system("chmod 660 $dhcpd_conf");


# Oh where oh where could my leases file directory be?
my @lease_file_directories_du_jour = ( 
  "/var/lib/dhcpd",
  "/var/dhcp",
  "/var/state/dhcp",
  "/etc"
);

my $dhcpd_lease_file_directory;
foreach my $directory (@lease_file_directories_du_jour) {
    # does *this* one exist?
    if ( -d "$directory" ) { 
        $dhcpd_lease_file_directory = $directory;
    }
    last if ( $dhcpd_lease_file_directory );
}

# Touch dhcpd.leases file so that dhcpd won't fart when started.
# Different installs put the file in different places so we touch
# one of several potential files and a monkey.
if( -d "$dhcpd_lease_file_directory" )
{
     my $file="$dhcpd_lease_file_directory/dhcpd.leases";
     system("touch $file");
     ($?) && die "\n$program_name Couldn't touch $file.\n";
}

# words of wisdom
system("clear");
print <<"EOF";

The dhcp server configuration file ($dhcpd_conf) file has been 
created for you.  Please verify it for accuracy.

If this file does not look satisfactory, you can run this command again
to re-create it: "si_mkdhcpserver"

WARNING!:  If you have multiple physical network interfaces, be sure to 
edit the init script that starts dhcpd to specify the interface that 
is connected to your DHCP clients.  Here's an example:

 Change "/usr/sbin/dhcpd" to "/usr/sbin/dhcpd eth1".

Depending on your distribution, you may be able to set this with the 
"INTERFACES" variable in "/etc/default/dhcp", "/etc/default/dhcp3-server",
or similar, or in your dhcpd initialization script ("/etc/init.d/dhcpd", 
"/etc/init.d/dhcp3-server", or similar).

Also, be sure to start or restart your dhcpd daemon.  This can usually
be done with a command like "/etc/init.d/dhcpd restart" or similar.

EOF

# Oh where oh where could my init script be?
my @init_scripts_du_jour = ( 
  "/etc/init.d/dhcp3-server",
  "/etc/init.d/dhcp",
  "/etc/init.d/dhcpd",
  "/etc/rc.d/init.d/dhcpd"
);

foreach my $file (@init_scripts_du_jour) {
    if( -e $file ){
        print "Would you like me to restart your DHCP server software now? (y/[n]): ";
        $continue=get_response();
        $continue=lc($continue);

        if( $continue eq "y" ){
            my $cmd="$file restart";
            system($cmd);
            exit 0;
        }
    }
}

exit 0;



# Subroutines
sub get_response {
    my $garbage_out=$_[0];
    my $garbage_in=<STDIN>;
    chomp $garbage_in;
    unless($garbage_in eq "") { $garbage_out = $garbage_in; }
    return $garbage_out;
}

# Usage: option_144($tmpfs_staging);
sub option_144 {

    my $value = shift;

    print DHCPDCONF qq(  # \n);
    print DHCPDCONF qq(  # option-144 tells your auto-install client to spool the image into a tmpfs\n);
    print DHCPDCONF qq(  # prior to laying it down on disk.  It is not certain that this is always\n);
    print DHCPDCONF qq(  # a good thing to do.  And if you're feeling gutsy and want to try it, be\n);
    print DHCPDCONF qq(  # sure that your (memory + swap) is at least twice the size of your image\n);
    print DHCPDCONF qq(  # or your image transfer will fail when the tmpfs filesystem gets full!!!\n);
    print DHCPDCONF qq(  # If unsure, say "no".\n);
    print DHCPDCONF qq(  # \n);
    print DHCPDCONF qq(  option option-144 "$value"; \n);
    print DHCPDCONF qq(\n);
}

