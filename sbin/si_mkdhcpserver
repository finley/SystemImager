#!/usr/bin/perl -w

#
#    vi:set filetype=perl:
#
#    This file is part of SystemImager.
#
#    SystemImager is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    SystemImager is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with SystemImager. If not, see <https://www.gnu.org/licenses/>.
#
#    Copyright (C) 2025 Olivier Lahaye <olivier.lahaye1@free.fr>
#
#    Others who have contributed to this code (in alphabetical order):
#     Grok 3 https://grok.com
#
#    See http://www.iana.org/assignments/bootp-dhcp-parameters for info on
#    custom option numbers.
#

use strict;
use Getopt::Long qw(:config no_bundling no_auto_help);
use Pod::Usage;
use File::Spec;
use File::Copy;
use POSIX qw(strftime);
use SystemImager::IpUtils qw(valid_ip);
use SystemImager::KeaConfUtils;

# Global variables
my $config_file = "/etc/kea/kea-dhcp4.conf";
my $debug = 0;
my $quiet = 0;
my @add_subnets;
my @del_subnets;
my @add_pools;
my @del_pools;
my @add_clients;
my @del_clients;
my $force = 0;
my $help = 0;
my $man = 0;
my $list_subnets = 0;
my $list_pools = 0;
my $list_clients = 0;
my $csv = 0;
my @dns_domains;
my @dns_searches;
my @dns_servers;
my @image_servers;
my @boot_servers;
my @log_servers;
my @log_server_ports;
my @ssh_download_urls;
my @flamethrower_port_bases;
my @staging_dir;

# Override die to use pod2usage for option-related errors
BEGIN {
    *CORE::GLOBAL::die = sub {
        my ($message) = @_;
        if ($quiet && !($help || $man || $debug)) {
            exit 1;  # Simply exit with status 1 when quiet is enabled
        }
        chomp $message;
        my ($option) = ($message =~ /--([\w-]+):/);
        if ($option) {
            pod2usage(
                -message => $message,
                -sections => [ "SYNOPSIS", "OPTIONS/$option" ],
                -exitval => 1,
                -verbose => 99
            );
        } else {
            local $! = 1;  # Set $! to control the exit code
            CORE::die "$message\n";
        }
    };
}

# Pre-parse @ARGV to set $debug early
for (my $i = 0; $i < @ARGV; $i++) {
    if ($ARGV[$i] =~ /^--debug(?:=(\d+))?$/ || ($ARGV[$i] eq "--debug" && $i + 1 < @ARGV && $ARGV[$i + 1] !~ /^--/)) {
        $debug = defined $1 ? $1 : ($i + 1 < @ARGV ? $ARGV[$i + 1] : 0);
        $debug = 0 if $debug !~ /^\d+$/;
        last;
    }
}

#-------------------------------------------------------------------------------
# Function:     get_modifier
# Description:  Retrieves the modifier (--subnet or --client) and its value from @ARGV
#               at the specified index, returning a hash with the modifier type and value.
#               If no valid modifier is found, returns --global with an undefined value.
# Parameters:   $index - Integer, the current index in @ARGV to check for a modifier
# Returns:      Hash reference with keys:
#                 - modifier: String ("--global", "--subnet", or "--client")
#                 - modifier_value: String or undef, the value associated with the modifier
# Throws:       None (relies on Getopt::Long for validation of modifier values)
#-------------------------------------------------------------------------------
sub get_modifier {
    my $modifier = "--global";
    my $modifier_value = undef;
    print "get_modifier called, ARGV=", join(", ", @ARGV), "\n" if $debug >= 3;
    if (@ARGV && $ARGV[0] =~ /^--(subnet|client)$/) {
        if (@ARGV > 1) {
            $modifier = "--$1";
            $modifier_value = $ARGV[1];
            print "Found modifier=$modifier, value=$modifier_value\n" if $debug >= 3;
            # Warn if the value looks like another option (possible missing value)
            print "Warning: Modifier $modifier value '$modifier_value' looks like an option; possible missing value?\n" if $debug >= 1 && $modifier_value =~ /^--/;
        } else {
            print "Warning: Modifier $modifier found but no value provided\n" if $debug >= 1;
        }
    }
    return { modifier => $modifier, modifier_value => $modifier_value };
}

# Function: check_arg
# Description:  Validates an option argument based on its type. Checks if the
#               argument does not start with -- (indicating a missing argument) and
#               validates it against the specified type.
# Parameters:   $opt - the name of the option
#               $value - the argument to test
#               $type - the expected type ('ip', 'file', 'subnet', 'client', 'fqdn', 'mac', 'ssh_url')
# Returns:      The validated argument
# Dies:         If the argument starts with -- or fails type validation
sub check_arg {
    my ($opt, $value, $type) = @_;
    die "--$opt: Insufficient arguments.\n" if $value =~ /^--/;
    if ($type eq 'ip') {
        die "--$opt: Invalid IPv4 address: $value\n" unless valid_ip($value);
    } elsif ($type eq 'path') {
        die "--$opt: Invalid path format: $value\n" unless $value =~ m|^/(?:[a-zA-Z0-9._-][a-zA-Z0-9._-]*(?:/[a-zA-Z0-9._-][a-zA-Z0-9._-]*)*)?$|;
    } elsif ($type eq 'file') {
        die "--$opt: Invalid file path: $value\n" unless $value =~ m|^[\w/.-]+$| && $value !~ m|^\s*$|;
    } elsif ($type eq 'subnet') {
        die "--$opt: Invalid subnet format: $value\n" unless $value =~ m|^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$|;
    } elsif ($type eq 'client') {
        die "--$opt: Invalid client format: $value\n"
            unless $value =~ m{^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)*|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2})$};
    } elsif ($type eq 'fqdn') {
        die "--$opt: Invalid FQDN format: $value\n"
            unless $value =~ m|^[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)*$|;
    } elsif ($type eq 'mac') {
        die "--$opt: Invalid MAC address: $value\n"
            unless $value =~ /^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$/;
    } elsif ($type eq 'port') {
        die "--$opt: Invalid port format: $value\n" unless $value =~ m|^\d+$| && $value >= 0 && $value <= 65535;
    } elsif ($type eq 'ssh_url') {
        die "--$opt: Invalid SSH URL path format: $value\n"
            unless $value =~ m|^/(?:[a-zA-Z0-9._-][a-zA-Z0-9._-]*(?:/[a-zA-Z0-9._-][a-zA-Z0-9._-]*)*)?$|;
    } else {
        die "--$opt: Unknown validation type: $type\n";
    }
    return $value;
}

# Parse command line options

# Configure Getopt::Long to pass through unrecognized options
# Complex options are parsed manually.
Getopt::Long::Configure("pass_through");

GetOptions(
    "file=s"              => sub {
		$config_file = check_arg(@_, 'file');
	},
    "debug:i"             => \$debug,
    "quiet"               => \$quiet,
    "help"                => \$help,
    "man"                 => \$man,
    "add-subnet=s{1}"     => sub {
        push @add_subnets, check_arg(@_, 'subnet');
    },
    "del-subnet=s{1}"     => sub {
        push @del_subnets, check_arg(@_, 'subnet');
    },
    "force"               => \$force,
    "add-pool=s{2}" => sub {
		push @add_pools, check_arg(@_, 'ip'); # called for each parameter. (resulting in a flat list)
    },
    "del-pool=s{2}" => sub {
        push @del_pools, check_arg(@_, 'ip'); # called for each parameter. (resulting in a flat list)
    },
	"add-client=s{3,4}" => sub {
        my ($opt, @args) = @_;
		#check_arg($opt, $args[0], 'client'); # Validate client (fqdn or mac or ip)
        push @add_clients, @args;
		push @add_clients, shift @ARGV if defined $ARGV[0] && $ARGV[0] =~ /^--global/; # --xxx seen as option, thus sub not triggered 
    },
	"del-client=s{1}" => sub {
        push @del_clients, [check_arg(@_, 'client')];
    },
    "dns-domain=s"        => sub {
        push @dns_domains, { value => check_arg(@_, 'fqdn'), %{get_modifier()} };
    },
    "dns-search=s"        => sub {
        push @dns_searches, { value => check_arg(@_, 'fqdn'), %{get_modifier()} };
    },
    "dns-servers=s{1,}"   => sub {
        my ($opt, @values) = @_;
        push @dns_servers, { value => [@values], %{get_modifier()} };
    },
    "image-servers=s{1,}" => sub {
        my ($opt, @values) = @_;
        push @image_servers, { value => [@values], %{get_modifier()} };
    },
    "boot-servers=s{1,}"  => sub {
        my ($opt, @values) = @_;
        push @boot_servers, { value => [@values], %{get_modifier()} };
    },
    "log-servers=s{1,}"   => sub {
        my ($opt, @values) = @_;
        push @log_servers, { value => [@values], %{get_modifier()} };
    },
    "log-server-port=i"   => sub {
        my ($opt, $value) = @_;
        push @log_server_ports, { value => $value, %{get_modifier()} };
    },
    "ssh-download-url=s"  => sub {
        my ($opt, $value) = @_;
        push @ssh_download_urls, { value => $value, %{get_modifier()} };
    },
    "flamethrower-port-base=i" => sub {
        my ($opt, $value) = @_;
        push @flamethrower_port_bases, { value => $value, %{get_modifier()} };
    },
    "staging-dir=s"       => sub {
        my ($opt, $value) = @_;
        my $entry = { value => $value, %{get_modifier()} };
        push @staging_dir, $entry;
    },
    "subnet=s"            => sub {
        my ($opt, $value) = @_;
        unless ($value =~ m|^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$|) {
            die "--$opt: Invalid subnet format: $value\n";
        }
    },
    "client=s"            => sub {
        my ($opt, $value) = @_;
        unless ($value =~ m{^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)*|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2})$}) {
            die "--$opt: Invalid client format (must be FQDN, IPv4, or MAC): $value\n";
        }
    },
    "list-subnets"        => \$list_subnets,
    "list-pools"          => \$list_pools,
    "list-clients"        => \$list_clients,
    "csv"                 => \$csv,
) or pod2usage(1);

# Manual parsing of remaining command line options
#my $option = "";
#while (@ARGV) {
#    $option = shift @ARGV if $ARGV[0] =~ /^--/;
#    print "got option: $option\n" if $debug >= 1
#
#}


# Validate options
if ($quiet && ($help || $man || $debug)) {
    die "--quiet: is incompatible with --help, --man or --debug\n";
}

if ($help) {
   pod2usage(-verbose => 1,
             -exitval => 0);
}

if ($man) {
    pod2usage(-verbose => 2,
              -exitval => 0);
}

if (!@add_subnets && !@del_subnets && !@add_pools && !@del_pools && !@add_clients && !@del_clients &&
    !@dns_domains && !@dns_searches && !@dns_servers && !@image_servers && !@boot_servers &&
    !@log_servers && !@log_server_ports && !@ssh_download_urls && !@flamethrower_port_bases &&
    !@staging_dir && !$list_subnets && !$list_pools && !$list_clients) {
    print STDERR "Error: At least one action option is required\n";
    pod2usage(1);
    exit 1;
}

# Validate file permissions
my $needs_write = (@add_subnets || @del_subnets || @add_pools || @del_pools || @add_clients || @del_clients ||
                   @dns_domains || @dns_searches || @dns_servers || @image_servers || @boot_servers ||
                   @log_servers || @log_server_ports || @ssh_download_urls || @flamethrower_port_bases ||
                   @staging_dir);
if ($needs_write) {
    if (-e $config_file) {
        unless (-w $config_file) {
            print STDERR "Error: Configuration file '$config_file' is not writable\n" unless $quiet;
            exit 1;
        }
    } else {
        my $dir = File::Spec->catdir((File::Spec->splitpath($config_file))[0,1]);
        unless (-e $dir) {
            die "--file : directory '$dir' does not exists\n" unless $quiet;
            exit 1;
        }
        unless (-w $dir) {
            die "--file : Cannot create configuration file '$config_file' in directory '$dir'. Needs write permission\n" unless $quiet;
            exit 1;
        }
    }
} else {
    unless (-e $config_file) {
        die "--file: Configuration file '$config_file' does not exists\n" unless $quiet;
        exit 1;
    }
    unless (-r $config_file) {
        die "--file: Configuration file '$config_file' is not readable\n" unless $quiet;
        exit 1;
    }
}

# Load or initialize configuration
print "Calling load_kea_config\n" if $debug >= 2;
my ($config, $changelog) = SystemImager::KeaConfUtils::load_kea_config($config_file, $debug);
unless ($config) {
    print "Calling init_kea_config\n" if $debug >= 2;
    $config = SystemImager::KeaConfUtils::init_kea_config();
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S kea-dhcp4.conf generated from scratch by si_mkdhcpserver", localtime);
}

# Process modification options

# Process --add-subnet option
my $modified = 0;
foreach my $subnet (@add_subnets) {
    my ($ip, $mask) = split /\//, $subnet;
    unless (valid_ip($ip) && $mask =~ /^\d+$/ && $mask >= 0 && $mask <= 32) {
        print STDERR "Error: Invalid subnet format: $subnet\n" unless $quiet;
        exit 1;
    }
    print "Calling add_subnet($subnet)\n" if $debug >= 2;
    my ($success, $msg) = SystemImager::KeaConfUtils::add_subnet($config, $subnet);
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --del-subnet option
foreach my $subnet (@del_subnets) {
    my ($ip, $mask) = split /\//, $subnet;
    unless (valid_ip($ip) && $mask =~ /^\d+$/ && $mask >= 0 && $mask <= 32) {
        print STDERR "Error: Invalid subnet format: $subnet\n" unless $quiet;
        exit 1;
    }
    print "Calling del_subnet($subnet, $force)\n" if $debug >= 2;
    my ($success, $msg) = SystemImager::KeaConfUtils::del_subnet($config, $subnet, $force);
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --add-pool options
while (@add_pools) {
    my ($start_ip, $end_ip) = splice(@add_pools, 0, 2);
    print "Calling add_pool($start_ip, $end_ip)\n" if $debug >= 2;
    my ($success, $msg) = SystemImager::KeaConfUtils::add_pool($config, $start_ip, $end_ip);
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --del-pool options
while (@del_pools) {
    my ($start_ip, $end_ip) = splice(@del_pools, 0, 2);
    print "Calling del_pool($start_ip, $end_ip)\n" if $debug >= 2;
    my ($success, $msg) = SystemImager::KeaConfUtils::del_pool($config, $start_ip, $end_ip);
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --add-client options
while (@add_clients >= 3) {
    my $name = shift @add_clients;
    my $mac = shift @add_clients;
    my $ip = shift @add_clients;
    my $global = (@add_clients && $add_clients[0] eq "--global") ? shift @add_clients : undef;
	check_arg("add-client",$name, 'fqdn');
	check_arg("add-client",$mac, 'mac');
	check_arg("add-client",$ip, 'ip');
    print "Calling add_client($name, $mac, $ip, ", ($global ? "global" : "subnet"), ")\n" if $debug >= 2;
    my ($success, $msg) = SystemImager::KeaConfUtils::add_client($config, $name, $mac, $ip, $global);
    die "Error: $msg" unless ($success);
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

foreach my $client (@del_clients) {
    my ($identifier) = @$client;
    print "Calling del_client($identifier)\n" if $debug >= 2;
    my ($success, $msg) = SystemImager::KeaConfUtils::del_client($config, $identifier);
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --dns-domain options
foreach my $entry (@dns_domains) {
    my $domain = $entry->{value};
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    unless ($domain =~ m|^[a-zA-Z0-9.-]+$|) {
        print STDERR "Error: Invalid domain format: $domain\n" unless $quiet;
        exit 1;
    }
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(domain-name, $domain, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "domain-name", $domain, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, domain-name, $domain)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "domain-name", $domain);
    } else {
        print "Calling set_option(domain-name, $domain, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "domain-name", $domain);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --dns-search options
foreach my $entry (@dns_searches) {
    my $search = $entry->{value};
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    unless ($search =~ m|^[a-zA-Z0-9.-]+$|) {
        print STDERR "Error: Invalid search domain format: $search\n" unless $quiet;
        exit 1;
    }
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(domain-search, $search, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "domain-search", $search, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, domain-search, $search)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "domain-search", $search);
    } else {
        print "Calling set_option(domain-search, $search, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "domain-search", $search);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --dns-servers options
foreach my $entry (@dns_servers) {
    my $ips = $entry->{value}; # Array reference
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    foreach my $ip (@$ips) {
        unless (valid_ip($ip)) {
            print STDERR "Error: Invalid IP format: $ip\n" unless $quiet;
            exit 1;
        }
    }
    my $csv_value = join(",", @$ips); # Create CSV string
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(domain-name-servers, $csv_value, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "domain-name-servers", $csv_value, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, domain-name-servers, $csv_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "domain-name-servers", $csv_value);
    } else {
        print "Calling set_option(domain-name-servers, $csv_value, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "domain-name-servers", $csv_value);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --image-servers options
foreach my $entry (@image_servers) {
    my $ips = $entry->{value}; # Array reference
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    foreach my $ip (@$ips) {
        unless (valid_ip($ip)) {
            print STDERR "Error: Invalid IP format: $ip\n" unless $quiet;
            exit 1;
        }
    }
    my $csv_value = join(",", @$ips); # Create CSV string
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(image-servers, $csv_value, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "image-servers", $csv_value, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, image-servers, $csv_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "image-servers", $csv_value);
    } else {
        print "Calling set_option(image-servers, $csv_value, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "image-servers", $csv_value);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --boot-servers options
foreach my $entry (@boot_servers) {
    my $ips = $entry->{value}; # Array reference
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    foreach my $ip (@$ips) {
        unless (valid_ip($ip)) {
            print STDERR "Error: Invalid IP format: $ip\n" unless $quiet;
            exit 1;
        }
    }
    my $csv_value = join(",", @$ips); # Create CSV string
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(boot-servers, $csv_value, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "boot-servers", $csv_value, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, boot-servers, $csv_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "boot-servers", $csv_value);
    } else {
        print "Calling set_option(boot-servers, $csv_value, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "boot-servers", $csv_value);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --log-servers options
foreach my $entry (@log_servers) {
    my $ips = $entry->{value}; # Array reference
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    foreach my $ip (@$ips) {
        unless (valid_ip($ip)) {
            print STDERR "Error: Invalid IP format: $ip\n" unless $quiet;
            exit 1;
        }
    }
    my $csv_value = join(",", @$ips); # Create CSV string
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(log-servers, $csv_value, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "log-servers", $csv_value, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, log-servers, $csv_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "log-servers", $csv_value);
    } else {
        print "Calling set_option(log-servers, $csv_value, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "log-servers", $csv_value);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --log-server-port options
foreach my $entry (@log_server_ports) {
    my $port = $entry->{value};
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    unless ($port =~ m|^\d+$| && $port >= 0 && $port <= 65535) {
        print STDERR "Error: Invalid port format: $port (must be 0-65535)\n" unless $quiet;
        exit 1;
    }
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(log-server-port, $port, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "log-server-port", $port, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, log-server-port, $port)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "log-server-port", $port);
    } else {
        print "Calling set_option(log-server-port, $port, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "log-server-port", $port);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --ssh-download-url options
foreach my $entry (@ssh_download_urls) {
    my $url = $entry->{value};
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    unless ($url =~ m|^/(?:[a-zA-Z0-9._-][a-zA-Z0-9._-]*(?:/[a-zA-Z0-9._-][a-zA-Z0-9._-]*)*)?$|) {
        print STDERR "Error: Invalid URL path format: $url\n" unless $quiet;
        exit 1;
    }
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(ssh-download-url, $url, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "ssh-download-url", $url, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, ssh-download-url, $url)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "ssh-download-url", $url);
    } else {
        print "Calling set_option(ssh-download-url, $url, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "ssh-download-url", $url);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --flamethrower-port-base options
foreach my $entry (@flamethrower_port_bases) {
    my $port = $entry->{value};
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    unless ($port =~ m|^\d+$| && $port >= 0 && $port <= 65535) {
        print STDERR "Error: Invalid port format: $port (must be 0-65535)\n" unless $quiet;
        exit 1;
    }
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(flamethrower-port-base, $port, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "flamethrower-port-base", $port, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, flamethrower-port-base, $port)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "flamethrower-port-base", $port);
    } else {
        print "Calling set_option(flamethrower-port-base, $port, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "flamethrower-port-base", $port);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Process --staging-dir options
foreach my $entry (@staging_dir) {
    my $path = $entry->{value};
    my $modifier = $entry->{modifier};
    my $modifier_value = $entry->{modifier_value};
    unless ($path =~ m|^/(?:[a-zA-Z0-9._-][a-zA-Z0-9._-]*(?:/[a-zA-Z0-9._-][a-zA-Z0-9._-]*)*)?$|) {
        print STDERR "Error: Invalid path format: $path\n" unless $quiet;
        exit 1;
    }
    my ($success, $msg);
    if ($modifier eq "--subnet") {
        print "Calling set_option(tmpfs-staging, $path, $modifier_value)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "tmpfs-staging", $path, $modifier_value);
    } elsif ($modifier eq "--client") {
        print "Calling set_client_option($modifier_value, tmpfs-staging, $path)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_client_option($config, $modifier_value, "tmpfs-staging", $path);
    } else {
        print "Calling set_option(tmpfs-staging, $path, global)\n" if $debug >= 2;
        ($success, $msg) = SystemImager::KeaConfUtils::set_option($config, "tmpfs-staging", $path);
    }
    unless ($success) {
        print STDERR "Error: $msg\n" unless $quiet;
        exit 1;
    }
    print "$msg\n" unless $quiet;
    push @$changelog, strftime("// %Y-%m-%d %H:%M:%S $msg", localtime);
    $modified = 1;
}

# Write configuration if modified
if ($modified) {
    print "Calling write_kea_config\n" if $debug >= 2;
    unless (SystemImager::KeaConfUtils::write_kea_config($config_file, $config, $changelog, $debug)) {
        print STDERR "Error: Failed to write configuration file\n" unless $quiet;
        exit 1;
    }
    # Reload configuration to ensure consistency
    print "Reloading configuration after modification\n" if $debug >= 1;
    ($config, $changelog) = SystemImager::KeaConfUtils::load_kea_config($config_file, $debug);
    unless ($config) {
        print STDERR "Error: Failed to reload configuration after writing\n" unless $quiet;
        exit 1;
    }
}

# Process list options
$csv = 1 if $quiet && ($list_subnets || $list_pools || $list_clients);

if ($list_subnets) {
    print "Calling list_subnets\n" if $debug >= 2;
    SystemImager::KeaConfUtils::list_subnets($config, $csv, $quiet);
}
if ($list_pools) {
    print "Calling list_pools\n" if $debug >= 2;
    SystemImager::KeaConfUtils::list_pools($config, $csv, $quiet);
}
if ($list_clients) {
    print "Calling list_clients\n" if $debug >= 2;
    SystemImager::KeaConfUtils::list_clients($config, $csv, $quiet);
}

exit 0;

__END__

=pod

=head1 NAME

si_mkdhcpserver - SystemImager DHCP server configuration tool for Kea DHCPv4

=head1 SYNOPSIS

si_mkdhcpserver [options]

=head1 DESCRIPTION

si_mkdhcpserver is a command-line tool to manage Kea DHCPv4 server configuration.
It creates and modifies the Kea configuration file, typically /etc/kea/kea-dhcp4.conf,
with support for SystemImager-specific options and client classes.

=head1 OPTIONS

=head2 file

B<--file> <filename>

Specify the configuration file to use (default: /etc/kea/kea-dhcp4.conf).

=head2 debug

B<--debug> [n]

Enable debug output (n=1: operations, n=2: +function calls, n=3: +data structures).
Incompatible with --quiet.

=head2 quiet

B<--quiet>

Suppress all messages except list output. Implies --csv for list options.
Incompatible with --debug, --help, and --man.

=head2 help

B<--help>

Display this help message and exit.

=head2 man

B<--man>

Display the full manual and exit.

=head2 add-subnet

B<--add-subnet> <ip/mask>

Add a new subnet (e.g., 192.168.1.0/24).

=head2 del-subnet

B<--del-subnet> <ip/mask> [--force]

Delete a subnet. Use --force to delete even if reservations exist.

=head2 add-pool

B<--add-pool> <start-ip> <end-ip>

Add a pool to correct subnet.

=head2 del-pool

B<--del-pool> <start-ip> <end-ip>

Delete a pool from a subnet.

=head2 add-client

B<--add-client> <name> <MAC> <IP> [--global]

Add a client reservation. Use --global to add globally.

=head2 del-client

B<--del-client> <name|MAC|IP>

Delete a client reservation (supports wildcards).

=head2 dns-domain

B<--dns-domain> <domain> [--subnet <ip/mask>]

Set the DNS domain globally or for a subnet.

=head2 dns-search

B<--dns-search> <domain1 domain2 ...> [--subnet <ip/mask>]

Set DNS search domains globally or for a subnet.

=head2 dns-servers

B<--dns-servers> <server1 server2 ...> [--subnet <ip/mask>]

Set DNS servers globally or for a subnet.

=head2 image-server

B<--image-server> <ip|fqdn> [--subnet <ip/mask>]

Set the image server globally or for a subnet.

=head2 boot-server

B<--boot-server> <ip|fqdn> [--subnet <ip/mask>]

Set the boot server (next-server) globally or for a subnet.

=head2 log-servers

B<--log-servers> <server1 server2 ...> [--subnet <ip/mask>]

Set log servers globally or for a subnet.

=head2 log-server-port

B<--log-server-port> <port> [--subnet <ip/mask>]

Set log server port (uint16) globally or for a subnet.

=head2 ssh-download-url

B<--ssh-download-url> <user@host/path> [--subnet <ip/mask>]

Set SSH download URL globally or for a subnet.

=head2 flamethrower-port-base

B<--flamethrower-port-base> <port> [--subnet <ip/mask>]

Set flamethrower port base (uint16) globally or for a subnet.

=head2 staging-dir

B<--staging-dir> [path] [--subnet <ip/mask> | --client <name|MAC|IP>]

Set staging directory (default: /tmp) globally, for a subnet, or client.

=head2 list-subnets

B<--list-subnets> [--csv]

List all subnets (CSV format if specified).

=head2 list-pools

B<--list-pools> [--csv]

List all pools (CSV format if specified).

=head2 list-clients

B<--list-clients> [--csv]

List all client reservations (CSV format if specified).

=head1 EXIT STATUS

=over 4

=item B<0> Success

=item B<1> Error (invalid options, file permissions, etc.)

=back

=head1 AUTHOR

Olivier Lahaye <olivier.lahaye1@free.fr>

=head1 COPYRIGHT

Copyright (C) 2025 Olivier Lahaye
Licensed under the GNU General Public License v2 or later.

=cut
