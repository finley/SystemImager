#!/usr/bin/perl -w
#
#    vi:set filetype=perl:
#
#    This file is part of SystemImager.
#
#    SystemImager is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    SystemImager is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with SystemImager. If not, see <https://www.gnu.org/licenses/>.
#
#    Copyright (C) 1999-2001 Brian Elliott Finley <brian.finley@baldguysoftware.com>
#    Copyright (C) 2002 Bald Guy Software <brian.finley@baldguysoftware.com>
#    Copyright (C) 2008 Andrea Righi <a.righi@cineca.it>
#

# declare modules
use POSIX;
use Fcntl ':flock';
use Getopt::Long;
use JSON;
use File::Temp qw/ mktemp /;

# set some variables
$version_number="SYSTEMIMAGER_VERSION_STRING";
$program_name="si_lsimage";
$get_help = "         Try \"$program_name --help\" for more options.";
$imageserver="127.0.0.1";

# functions
sub trim {
  my @out = @_;
  for (@out) {
    s/^\s+//;
    s/\s+$//;
  }
  return wantarray ? @out : $out[0];
}

# set version information
$version_info = <<"EOF";
$program_name (part of SystemImager) version $version_number

Copyright (C) 1999-2006 Brian Elliott Finley
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF

# set help information
$help_info = $version_info . <<"EOF";

Usage: $program_name [OPTION]... [IMAGENAME]...

Options: (options can be presented in any order)

 --help
    Display this output.

 --version
    Display version and copyright information.

 --verbose
    Display more information, including image retrieval dates.

 --server HOSTNAME
    Hostname or IP address of the imageserver.  Defaults to localhost.

 --ssh-user USERNAME
    Username for ssh connection to the client.  Only needed if an encrypted
    connection is required.

 --json
    Outputs result using json object.

Download, report bugs, and make suggestions at:
http://systemimager.org/
EOF


my $verbose;

# interpret command line options

Getopt::Long::Configure("posix_default");
Getopt::Long::Configure("no_gnu_compat");
Getopt::Long::Configure("bundling");

GetOptions(
  "help"        => \$help,
  "version"     => \$version,
  "verbose|v"   => \$verbose,
  "ssh-user=s"  => \$ssh_user,
  "server=s"    => \$imageserver,
  "json"	=> \$json
) or die qq($help_info);

# if requested, print help information
if($help) {
  print qq($help_info);
  exit 0;
}

# if requested, print version and copyright information
if($version) {
  print qq($version_info);
  exit 0;
}

# be sure $imageserver name doesn't start with a hyphen
if($imageserver) {
  if($imageserver =~ /^-/) {
    die "\n$program_name: Imageserver name can\'t start with a hyphen.\n\n$get_help";
  }
}

# default port number
$port = "873";

# If we're using SSH, go ahead and establish port forwarding
if (($ssh_user) and ("$imageserver" ne "127.0.0.1") and ("$imageserver" ne "localhost"))
{
  # Get a random port number (normal rsync port won't work if rsync daemon is running)
  my $port_in_use="yes";
  until ( $port_in_use eq "no" )
  {
    $port_in_use="no";
    $port = rand 60000;
    $port =~ s/\..*//;

    # Be sure port isn't reserved
    $file="/etc/services";
    open (FILE, "<$file") || die ("$0: Couldn't open $file for reading\n");
      while (<FILE>) {
        if (/$port/) {
          $port_in_use="yes";
          next;
        }
      }
    close FILE;

    # Be sure port isn't in use
    open (NETSTAT, "netstat -tn |");
    while (<NETSTAT>) {
      (my $junk, my $port_and_junk) = split (/:/);
      if ($port_and_junk) {
        (my $netstat_port, my $other_junk) = split (/ +/, $port_and_junk);
        if ($netstat_port = /$port/) {
          $port_in_use="yes";
          next;
        }
      }
    }
  }

  # Setup the port forwarding
  $command="ssh -f -l $ssh_user -L $port:$imageserver:873 $imageserver sleep 5";
  $rc = 0xffff & system($command);
  if ($rc != 0) {
    print "FATAL: Failed to establish secure port forwarding to $imageserver!\n";
    die   "       Be sure that you can run \"ssh -l $ssh_user $imageserver\" successfully.\n";
  }

  # and change the source host to point to localhost so we can use the port forwarding
  $imageserver="127.0.0.1";
}

my %seen = ();
my @images_list = sort(grep { ! $seen{$_} ++ } @ARGV);
my @tmp_list = @images_list;
my $images_regexp = join('|', map { $_ = "^$_\$" } @tmp_list);
my %images = ();

# get listing
my $workers = 0;
my $stdout_lockfile = mktemp("/tmp/si_lsimage_lock.XXXX");
open(LOCK, '>', $stdout_lockfile) or
	die("ERROR: couldn't open: $stdout_lockfile\n");

if(!$json) {
    print "--------------------------------------------------------------------------------\n";
    print "Available image(s):\n";
    print "--------------------------------------------------------------------------------\n";
}

my $i=0;
$command = "rsync rsync://${imageserver}:$port/";
open(FILE, "$command|");
while (<FILE>) {
    $_ = trim($_);
    next if (m/^(scripts|boot|overrides|torrents)$/);
    if ($images_regexp) {
        next if not (m/$images_regexp/);
        $images{$_} = 1;
    }

    my $pid;
    if ($pid = fork) {
        $workers++;
        next;
    } elsif (!(defined $pid)) {
        die("WARNING: couldn't fork!\n");
    }
    select(STDOUT);
    $| = 1;
    my $line;
    my ($image_name,$image_timestamp,$image_goldenclient);
    if ($verbose||$json) {
	
        $image_name = $_;
        $line = "  Image: $image_name";

        my $file = tmpnam();

        # display time stamp
        my $cmd1 = "rsync -a rsync://${imageserver}:$port/$_/etc/systemimager/IMAGE_RETRIEVAL_TIME $file 1>/dev/null 2>/dev/null";
        my $cmd2 = "rsync -a rsync://${imageserver}:$port/$_/etc/systemimager/mounted_filesystems  $file 1>/dev/null 2>/dev/null";
        if (!system($cmd1)) {

            open(IMAGE_RETRIEVAL_TIME,"<$file") or
                die("ERROR: couldn't open $file! $!\n");
            $image_timestamp = <IMAGE_RETRIEVAL_TIME>;
            chomp($image_timestamp);
            $line .= "\tTime: $image_timestamp";

            close(IMAGE_RETRIEVAL_TIME);

        } elsif (!system($cmd2)) {
            my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($file);
            my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($mtime);
            $mon++;
            $year += 1900;
	    $image_timestamp = sprintf("%04d.%02d.%02d %02d:%02d", $year,$mon,$mday,$hour,$min);
            $line .= "\tTime: $image_timestamp";
        } else {
            $line .= "\tTime: N/A";
	    $image_timestamp = "N/A";
        }

        # display golden client
        my $cmd = "rsync -a rsync://${imageserver}:$port/$_/etc/systemimager/IMAGE_RETRIEVED_FROM $file 1>/dev/null 2>/dev/null";
        if (!system($cmd)) {
            open(IMAGE_RETRIEVED_FROM,"<$file") or
                die("ERROR: couldn't open $file! $!\n");
            $image_goldenclient = <IMAGE_RETRIEVED_FROM>;
            chomp($image_goldenclient);
            close(IMAGE_RETRIEVED_FROM);
        } else {
            $image_goldenclient = "N/A";
        }
        unlink($file);

        $line .= "\tGolden Client: $image_goldenclient";

    } else {
	    $line = "  $_";
    }
    flock(LOCK, LOCK_EX);
    # create hash new entry
    if($json) {
        my %image_hash = ('image_name' => $image_name, 'image_timestamp' => $image_timestamp, 'image_goldenclient' => $image_goldenclient);
        my $json_text = encode_json(\%image_hash);
        print $json_text."\n";
    } else {
        print "$line\n";
    }
    flock(LOCK, LOCK_UN);
    exit(0);
}
close(FILE);

while ($workers) {
	last if (wait == -1);
	$workers--;
}

close(LOCK);
unlink($stdout_lockfile);
if(!$json) {
    print "\n";
}

if ($images_regexp) {
    foreach (@images_list) {
        unless (defined($images{$_})) {
            print "WARNING: image '$_' not found!\n";
        }
    }
}

exit(0);
