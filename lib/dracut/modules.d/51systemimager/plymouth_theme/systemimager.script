// vi: set filetype=cpp et ts=4:
//
//    This file is part of SystemImager.
//
//    SystemImager is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 2 of the License, or
//    (at your option) any later version.
//
//    SystemImager is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with SystemImager. If not, see <https://www.gnu.org/licenses/>.
//
//    Copyright (C) 2017-2019 Olivier LAHAYE <olivier.lahaye1@free.fr>
//
//    Thanks to Charlie Brej <brejc8(at)gmail(dot)com> for his help undestanding
//    script module behaviors and tricks.
//
//   Purpose:
//     This file is the logic for SystemImager plymouth frontend.
//     It reacts to 2 plymouth commands:
//
//     1/ Display some log information on screen
//        plymouth message --text="X:Some text message"
//        where X letter = (E)rror | (W)arning | (I)nfo | (A)ction | (N)otice
//
//     2/ Light step icon and draw a progress bar for the current step if needed
//        plymout update --status="STEP:VAL:MAX"
//        where STEP = init|part|frmt|prei|imag|boot|post
//        where VAL is a 3 digit number (0 is noted 000)
//        where MAX is the maximum value (000 means do not display progress bar; only icon)
//

// Max chars in a log line (TODO: need to compute that according to font and swreen width)
LINE_WIDTH=120;
// Margin between 2 elements or around screen (TODO: need to compute that)
margins_width=20;
// how many lines in a dialog box:
dlgb_box_max_lines = 6;
// Hidden passwords bullets:
bullets = "ooooooooooooooooooooooo";

display_system_messages=0; // Do not display system messages by default.
                           // Can be unabled by plymouth update --status="conf:sys:Y"

screen_width = Window.GetWidth();
screen_height = Window.GetHeight();

// Setup wallpaper.
wallpaper_image = Image("Background.png");
resized_wallpaper_image = wallpaper_image.Scale(screen_width,screen_height);
wallpaper_sprite = Sprite(resized_wallpaper_image);
wallpaper_sprite.SetZ( -100 ); // Wall paper is behind everything.

// Setup SystemImager logo.
banner.image = Image("SystemImagerBanner.png");
banner.sprite = Sprite(banner.image);
banner.sprite.SetPosition( margins_width, margins_width, 100 );
banner.sprite.SetOpacity(1.0);
banner.height = banner.image.GetHeight();

// Load step icons.
step_init.image        = Image("icon_init.png");
step_partition.image   = Image("icon_partition.png");
step_format.image      = Image("icon_format.png");
step_preinstall.image  = Image("icon_preinstall.png");
step_imaging.image     = Image("icon_writeimage.png");
step_bootloader.image  = Image("icon_bootloader.png");
step_postinstall.image = Image("icon_postinstall.png");


// Compute icons scale suited for screen width
// we want size 64 for a 1024 pixel wide screen.
step_icon.size = screen_width * 64 / 1024; // We want 64 pix wid icons on 1024pix wide screen.

// Initialise step icons onn screen
step_Y = ( screen_height - margins_width - step_icon.size );
step_Z = 101;
step_icon.anchor = ( ( screen_width - margins_width - margins_width ) / 8 ) ; // 7 steps => 8 spacers

step_init.sprite = Sprite(step_init.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor - ( step_icon.size / 2 ) );
step_init.sprite.SetPosition( step_X, step_Y, step_Z );
step_init.sprite.SetOpacity(0.0);

step_preinstall.sprite = Sprite(step_preinstall.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor * 2 - ( step_icon.size / 2 ) );
step_preinstall.sprite.SetPosition( step_X, step_Y, step_Z );
step_preinstall.sprite.SetOpacity(0.0);

step_partition.sprite = Sprite(step_partition.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor * 3 - ( step_icon.size / 2 ) );
step_partition.sprite.SetPosition( step_X, step_Y, step_Z );
step_partition.sprite.SetOpacity(0.0);
 
step_format.sprite = Sprite(step_format.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor * 4 - ( step_icon.size / 2 ) );
step_format.sprite.SetPosition( step_X, step_Y, step_Z );
step_format.sprite.SetOpacity(0.0);

step_imaging.sprite = Sprite(step_imaging.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor * 5 - ( step_icon.size / 2 ) );
step_imaging.sprite.SetPosition( step_X, step_Y, step_Z );
step_imaging.sprite.SetOpacity(0.0);

step_bootloader.sprite = Sprite(step_bootloader.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor * 6 - ( step_icon.size / 2 ) );
step_bootloader.sprite.SetPosition( step_X, step_Y, step_Z );
step_bootloader.sprite.SetOpacity(0.0);

step_postinstall.sprite = Sprite(step_postinstall.image.Scale(step_icon.size,step_icon.size));
step_X = ( margins_width + step_icon.anchor * 7 - ( step_icon.size / 2 ) );
step_postinstall.sprite.SetPosition( step_X, step_Y, step_Z );
step_postinstall.sprite.SetOpacity(0.0);

// Init progress bar.
// 1st: Load the pixel art.
box.image   = Image("box.png");   // 40px height - 1px wide
progress_box.image   = box.image;
progress_gauge.image = Image("progress_gauge.png"); // 36px height - 128px wide
progress_hide.image  = Image("hide_box.png");       // 36px height - 1px wide

// 2nd: Compute progress bar dimentions.
//      We want 20px height for 768 height screen.
progress_unit.width   = 50; // Includes margin to end of screen
progress_bar.height   = Math.Int((screen_height * 20) / 768); // 20px on 768 height screen
progress_bar.Y        = screen_height - margins_width - step_icon.size - margins_width - progress_bar.height;
progress_bar.X        = 130;   // Could be aligned with log
progress_bar.width    = screen_width - progress_bar.X - progress_unit.width - margins_width; // room for title and units.
progress_gauge.height = Math.Int((screen_height * 16) / 768); // 16px on 768 height screen
progress_gauge.margin = Math.Int(( progress_bar.height - progress_gauge.height ) / 2);
progress_gauge.width  = progress_bar.width - ( 2 * progress_gauge.margin );

// This sprite holds the progress bar label like "Progress: "
progress_title.image  = Image.Text("", 1.0, 1.0, 1.0); // title at left of progress bar
progress_title.sprite = Sprite(progress_title.image);
progress_title.sprite.SetOpacity( 0.0 ); // Hidden by default
progress_title.sprite.SetX( margins_width );
progress_title.sprite.SetY( progress_bar.Y );
progress_title.sprite.SetZ( 100 );

// Init message box.
// 1st: reuse an oversized progressbox.

dlgb_box.width=(screen_width-2*margins_width)*(50/100);
dlgb_box.height=(screen_height-2*margins_width)*(50/100);
dlgb_box.X=(screen_width-dlgb_box.width)/2;
dlgb_box.Y=(screen_height-dlgb_box.height)/2;

dlgb_box.border_image     = box.image;
dlgb_box.background_image = Image("dialog_bgnd.png");
dlgb_box.yes_image = Image("yes.png");
dlgb_box.no_image  = Image("no.png");
dlgb_box.pwd_image = Image("lock.png");
dlgb_box.zzz_image = Image("action.png");

dlgb_box.border_sprite     = Sprite(dlgb_box.border_image.Scale(dlgb_box.width+margins_width,dlgb_box.height+margins_width));
dlgb_box.background_sprite = Sprite(dlgb_box.background_image.Scale(dlgb_box.width,dlgb_box.height));
dlgb_box.yes_sprite        = Sprite(dlgb_box.yes_image.Scale(step_icon.size,step_icon.size));
dlgb_box.no_sprite         = Sprite(dlgb_box.no_image.Scale(step_icon.size,step_icon.size));
dlgb_box.pwd_sprite        = Sprite(dlgb_box.pwd_image.Scale(step_icon.size,step_icon.size));
dlgb_box.zzz_sprite        = Sprite(dlgb_box.zzz_image.Scale(step_icon.size,step_icon.size));

dlgb_box.border_sprite.SetPosition(dlgb_box.X-margins_width/2,dlgb_box.Y-margins_width/2,200);
dlgb_box.border_sprite.SetOpacity( 0.0 ); // Hidden by default
dlgb_box.background_sprite.SetPosition(dlgb_box.X,dlgb_box.Y,201);
dlgb_box.background_sprite.SetOpacity( 0.0 ); // Hidden by default
dlgb_box.yes_sprite.SetPosition(dlgb_box.X+margins_width/2,dlgb_box.Y+margins_width/2,202);
dlgb_box.yes_sprite.SetOpacity( 0.0 ); // Hidden by default
dlgb_box.no_sprite.SetPosition(dlgb_box.X+margins_width/2,dlgb_box.Y+margins_width/2,203);
dlgb_box.no_sprite.SetOpacity( 0.0 ); // Hidden by default
dlgb_box.pwd_sprite.SetPosition(dlgb_box.X+margins_width/2,dlgb_box.Y+margins_width/2,204);
dlgb_box.pwd_sprite.SetOpacity( 0.0 ); // Hidden by default
dlgb_box.zzz_sprite.SetPosition(dlgb_box.X+margins_width/2,dlgb_box.Y+margins_width/2,205);
dlgb_box.zzz_sprite.SetOpacity( 0.0 ); // Hidden by default

// Initialise dialog box text lines text lines.
for (dlgb_box_text.line=0; dlgb_box_text.line < dlgb_box_max_lines; dlgb_box_text.line++) {
    dlgb_box_text_image[dlgb_box_text.line] = Image.Text("",1.0, 1.0, 1.0, "Fixed");
    dlgb_box_text_sprite[dlgb_box_text.line] = Sprite();
    dlgb_box_text_sprite[dlgb_box_text.line].SetImage(dlgb_box_text_image[dlgb_box_text.line]);
    dlgb_box_text_sprite[dlgb_box_text.line].SetPosition(dlgb_box.X+margins_width+step_icon.size,dlgb_box.Y+margins_width+step_icon.size+20*dlgb_box_text.line,204);
    dlgb_box_text_sprite[dlgb_box_text.line].SetOpacity( 0.0 ); // Hidden by default
}
dlgb_box_text.line=0; // Reset current line to zero.

// Unit label
progress_unit.image  = Image.Text("", 1.0, 1.0, 1.0); // Units at end of bar (after value)
progress_unit.sprite = Sprite(progress_unit.image);
progress_unit.sprite.SetOpacity( 0.0 ); // Hidden by default
progress_unit.sprite.SetX( screen_width - progress_unit.width );
progress_unit.sprite.SetY( progress_bar.Y );
progress_unit.sprite.SetZ( 100 );

// This sprite holds the border (backgroud) of the progress bar
progress_box.sprite = Sprite(progress_box.image.Scale(progress_bar.width,progress_bar.height)); // The box of the gauge
progress_box.sprite.SetOpacity (0.0); // Hidden by default
progress_box.sprite.SetX( progress_bar.X );
progress_box.sprite.SetY( progress_bar.Y );
progress_box.sprite.SetZ( 90 );

// This sprite holds the progress bar content.
progress_gauge.sprite = Sprite(progress_gauge.image.Scale(progress_gauge.width, progress_gauge.height)); // The content of the gauge
progress_gauge.sprite.SetOpacity( 0.0 ); // Hidden by default
progress_gauge.sprite.SetX( progress_bar.X + progress_gauge.margin );
progress_gauge.sprite.SetY( progress_bar.Y + progress_gauge.margin );
progress_gauge.sprite.SetZ( 95 ); // Over box

progress_hide.sprite  = Sprite(progress_hide.image.Scale(progress_gauge.width, progress_gauge.height)); // Hides upper content of gauge
progress_hide.sprite.SetOpacity( 0.0 ); // Hidden by default
progress_hide.sprite.SetX( progress_bar.X + progress_gauge.margin);
progress_hide.sprite.SetY( progress_bar.Y + progress_gauge.margin );
progress_hide.sprite.SetZ( 100 ); // Over gauge.

// Compute space left for logs.
// margins_width banner margins_width LOGLINES margins_width progress_bar margins_width step_icons margins_width
// num_scroll_lines = (screen_width - all the above except LOGLINES) / font-height
num_scroll_lines = ( screen_height - banner.height - progress_bar.height - step_icon.size - ( 5 * margins_width ) ) / 20; // 20 => font height. (TODO: try not to hardcode that)

// Initialising text images and their positions
// 20 is the height (including line spacing) of each line
for (i=0; i < num_scroll_lines; i++) {
  status[i] = Image.Text("", 0, 0, 0);
  lines[i]  = Image.Text("", 0, 0, 0);
  status_sprite[i] = Sprite();
  message_sprite[i] = Sprite();
  status_sprite[i].SetPosition( margins_width , (margins_width + banner.height + margins_width) + (i * 20), 100 );
  message_sprite[i].SetPosition( 100 , (margins_width + banner.height + margins_width) + (i * 20), 100 );
}
 
// String.GetLength(string) doesn't exists is API.
fun StringLength(string) {
  index = 0;
  str = String(string);
  while(str.CharAt(index)) index++;
  return index;
}

// Handle messages using our scroll_message function.
// Theses are system messages or messages from "plymouth message --text="
// used in postinstall scripts.
fun scroll_message_callback(text) {
   scroll_message("S", text);
}

// Scroll old messages and add new one at bottom.
// status: single letter string.
//         E: Error
//         I: Information
//         W: Warning
//         A: Action
//         N: Notice
//         S: System
// text: text to display.
fun scroll_message(status_flag, text) {
   if ( status_flag == "S" && display_system_messages != 1 )
           return; // Do not display system messages if display_system_messages != 1
  // 1st: Shift message one up
   for (i = 0; i < num_scroll_lines - 1; i++) {
     lines[i] = lines[i+1];
     status[i] = status[i+1];
   }
 
   // 2nd: Create the image for the latest message
   R=0.0; G=0.0; B=0.0;
   status_text = "";
   lines[i] = Image.Text(text, 1.0, 1.0, 1.0, 1.0, "Fixed");
   if (status_flag == "E") {         // ERROR
      R=1.0; G=0.0; B=0.0;
      status_text = "Error";
   } else if (status_flag == "W") {  // WARNING
      status_text = "Warning";
      R=1.0; G=0.7; B=0.0;
   } else if (status_flag == "I") {  // INFO
      R=0.0; G=1.0; B=0.0;
      status_text = "Info";
   } else if (status_flag == "A") {  // ACTION
      R=1.0; G=1.0; B=0.0;
      status_text = "Action";
   } else if (status_flag == "N") {  // NOTICE
      R=0.0; G=1.0; B=1.0;
      status_text = "Notice";
   } else if (status_flag == "O") {  // std Out
      R=1; G=1; B=0.7;
      status_text = "StdOut";
   } else if (status_flag == "R") {  // std Err
      R=1; G=0.5; B=0.5;
      status_text = "StdErr";
   } else if (status_flag == "S") {  // SYSTEM (internal use)
      R=0.5; G=0.5; B=0.5;
      status_text = "System";
   } else if (status_flag == "D") { // DEBUG (internal use)
      R=0.5; G=0.5; B=1.0;
      status_text = "Debug";
   } else if (status_flag == "F") {  // FATAL
      status_text = "FATAL";
      R=1.0; G=0.3; B=0.3;
   }
   status[i] = Image.Text(status_text, R, G, B, "Fixed");
 
   // 3rd: Re-positioning the text images
   for (i = 0; i < num_scroll_lines; i++) {
     message_sprite[i].SetImage(lines[i]);
     status_sprite[i].SetImage(status[i]);
   }
}

//
// DialogBox(dlgb_type, dlgb_text)
// Display (or hide) a dialog box.
// dlgb_type: "yes" or " no" or "zzz" or "pwd" or "off"
// dlgb_text: "Messsage to display
fun DialogBox(dlgb_type, dlgb_text) {

    if (dlgb_type == "off") {
        dlgb_box.border_sprite.SetOpacity( 0.0 );
        dlgb_box.background_sprite.SetOpacity( 0.0 );
        dlgb_box.yes_sprite.SetOpacity( 0.0 );
        dlgb_box.no_sprite.SetOpacity( 0.0 );
        dlgb_box.pwd_sprite.SetOpacity( 0.0 );
        dlgb_box.zzz_sprite.SetOpacity( 0.0 );
        dlgb_box.text_sprite.SetOpacity( 0.0 );

        for (dlgb_box_text.line=0; dlgb_box_text.line < dlgb_box_max_lines; dlgb_box_text.line++) {
            dlgb_box_text_image[dlgb_box_text.line] = Image.Text("",1.0, 1.0, 1.0, "Fixed");
            dlgb_box_text_sprite[dlgb_box_text.line].SetImage(dlgb_box_text_image[dlgb_box_text.line]);
            dlgb_box_text_sprite[dlgb_box_text.line].SetPosition(dlgb_box.X+margins_width+step_icon.size,dlgb_box.Y+margins_width+step_icon.size+20*dlgb_box_text.line,204);
            dlgb_box_text_sprite[dlgb_box_text.line].SetOpacity( 0.0 ); // Hidden by default
        }
        dlgb_box_text.line = 0; // Reset current line to 0 in text box.
        return;
    } else if(dlgb_type == "yes") {
        dlgb_box.yes_sprite.SetOpacity( 1.0 );
        dlgb_box.no_sprite.SetOpacity( 0.0 );
        dlgb_box.pwd_sprite.SetOpacity( 0.0 );
        dlgb_box.zzz_sprite.SetOpacity( 0.0 );
    } else if(dlgb_type == " no") {
        dlgb_box.no_sprite.SetOpacity( 1.0 );
        dlgb_box.yes_sprite.SetOpacity( 0.0 );
        dlgb_box.pwd_sprite.SetOpacity( 0.0 );
        dlgb_box.zzz_sprite.SetOpacity( 0.0 );
    } else if(dlgb_type == "pwd") {
        dlgb_box_text.line = 0;
        dlgb_box.pwd_sprite.SetOpacity( 1.0 );
        dlgb_box.no_sprite.SetOpacity( 0.0 );
        dlgb_box.yes_sprite.SetOpacity( 0.0 );
        dlgb_box.zzz_sprite.SetOpacity( 0.0 );
    } else if(dlgb_type == "zzz") {
        dlgb_box.zzz_sprite.SetOpacity( 1.0 ); // TODO: Make it spin // TODO: Make it spin
        dlgb_box.no_sprite.SetOpacity( 0.0 );
        dlgb_box.yes_sprite.SetOpacity( 0.0 );
        dlgb_box.pwd_sprite.SetOpacity( 0.0 );
    }
    dlgb_box.border_sprite.SetOpacity( 0.9 );
    dlgb_box.background_sprite.SetOpacity( 1.0 );
    dlgb_box_text_image[dlgb_box_text.line] = Image.Text(dlgb_text,1.0, 1.0, 1.0, "Fixed");
    dlgb_box_text_sprite[dlgb_box_text.line].SetImage(dlgb_box_text_image[dlgb_box_text.line]);
    dlgb_box_text_sprite[dlgb_box_text.line].SetImage(dlgb_box_text_image[dlgb_box_text.line]);
    dlgb_box_text_sprite[dlgb_box_text.line].SetOpacity( 1.0 );
    dlgb_box_text.line++;
    if (dlgb_box_text.line >= dlgb_box_max_lines)
            dlgb_box_text.line = 0;
}
//
// ProgressBar(title, progress, max, unit)
// Draw or Hide the progress bar.
//
// - title: the label to display at left.
// - progress: the gauge value
// - max: the max value or 0 to hide the progress bar.
// - unit: text to display at right of the bar.
//
fun ProgressBar(title, progress, max, unit) {
   // Display or update progress bar.
   if( max == 0 ) { // We don't want a progress bar.
      // Hide ProgressBar
      progress_title.sprite.SetOpacity( 0.0 );
      progress_box.sprite.SetOpacity( 0.0 );
      progress_gauge.sprite.SetOpacity( 0.0 );
      progress_hide.sprite.SetOpacity( 0.0 );
      progress_unit.sprite.SetOpacity( 0.0 );
   } else { // We assume we have a value...
      title = Image.Text(title, 1.0, 1.0, 1.0);
      progress_title.sprite.SetImage(title);
      unit = Image.Text("" + progress + unit, 1.0, 1.0, 1.0);
      progress_unit.sprite.SetImage(unit);
      shrink_factor = 1 - (progress / max);
      hide_bar.width = Math.Int(shrink_factor * (progress_bar.width - 2 * progress_gauge.margin));
      hide_bar_posX = screen_width - progress_unit.width - progress_gauge.margin - hide_bar.width - margins_width;
      progress_hide.sprite.SetX( hide_bar_posX );
      progress_hide.sprite.SetImage(progress_hide.image.Scale(hide_bar.width, progress_gauge.height));
      progress_title.sprite.SetOpacity( 1.0 );
      progress_box.sprite.SetOpacity( 1.0 );
      progress_gauge.sprite.SetOpacity( 1.0 );
      progress_hide.sprite.SetOpacity( 0.8 );
      progress_unit.sprite.SetOpacity( 1.0 );
   }
}

// This functions takes a string containing an integer as input. It returns the integer read or "#NaN" or "#Overflow"
// Author: Olivier LAHAYE
// Licence: GPL
// Input: string to convert.
// Output: numerical value or "#NaN" or "#Overflow"
// Examples:
// "" => 0
// " " => "#NaN"
// "_" => "#NaN"
// "000965" => 965
// "1.0" => "#NaN"
// "foo" => "#NaN"
fun StringToInteger(number_string) {
    ref = "0123456789";
    overflow_limit = 16; // Double: around 16 digits max.
    // load the number string
    number_length = 0;
    while (char[number_length] = number_string.CharAt(number_length)) {
        digit[number_length] = 0;
        number_length++;
        if (number_length > overflow_limit) return ("#Overflow");
    }
    index=0;
    found=0;
    while ( index < 10 ) { // For each base 10 digit
        for(c=0; c<number_length; c++) { // for each number_string digit
            if ( char[c] == ref.CharAt(index) ) { 
                digit[c] = index; // Found digit #c
                found++;
            }
            // Check if all digits have been found.
            if (found == number_length)
                index = 10; // Leave early the loop.
        }
        index++;
    }
    if (found < number_length) return ( "#NaN" ); // This is not a number
    return_val = 0;
    factor = 1;
    while (number_length > 0) {
        number_length--;
        return_val += ( digit[number_length] * factor );
        factor *= 10;
    }
    return( return_val );
}

// This function will update stuffs on screen and is triggered by the use of
// plymout update --status="specially crafted message"
// Message structure:
// fields are separated by ":" (not tested)
// 1st field: 4 letters: the "command"
//     - mesg => displays a log message scrolling previous lines one up.
//            - 2nd field => Message to display (see format in scroll_message() )
//     - init => Displays init icon
//     - part => Displays partition disk icon
//     - frmt => Displays format partition icon
//     - prei => displays pre install scripts icon AND
//            - field 2: (3 digits): script # being run
//            - Field 3: number of scripts to run
//     - imag => Displays imaging icon AND a progress bar
//            - field 2: (3 digits): percentage progress
//            - field 3: (3 digits; aulways 100): max percentage.
//     - boot => Displays bootloader install icon
//     - post => Displays post install scripts icon AND
//            - field 2: (3 digits): script # being run
//            - Field 3: number of scripts to run
//     - conf => Configure theme
//            - field 2: (3 letters): parameter to set
//                    - "sys": enable/disable displays system messages as well.
//                    - field 3: (1 letter): "Y" or "N".
//            - field 3: (3 digits): value to set.

fun update_status_callback(text) {
   // Check we get a formatted message.
   separator = text.SubString(4, 5);
   if (separator != ":")
      scroll_message("S", text); // not an SIS message.

   // We have a SIS message: Get order to handle.
   command  = text.SubString( 0 , 4 );

   if(command == "mesg") {
      // Get message status (Warning, Error, Info, ....)
      //      stored in as a single letter in second field.
      msg_status = text.SubString(5,6);
      // text.SubString(6,7); // is another separator (ignored)
      msg_text   = text.SubString(7,260); // Assumes that messages won't exceed 255.

      // 3rd: Truncate the message if too long
      if (StringLength(msg_text) > LINE_WIDTH) {
        msg_text = msg_text.SubString(0, LINE_WIDTH - 3);
        msg_text += "...";
      }
      scroll_message(msg_status, msg_text);
   } else if(command == "init") {
      step_init.sprite.SetOpacity(1.0);
      ProgressBar("Initialising...", "", 0, "");
   } else if (command == "part") {
      step_partition.sprite.SetOpacity(1.0);
      ProgressBar("Partitionning...", "", 0, "");
   } else if (command == "frmt") {
      step_format.sprite.SetOpacity(1.0);
      ProgressBar("Formatting...", "", 0, "");
   } else if (command == "prei") {
      step_preinstall.sprite.SetOpacity(1.0);
      script_number = StringToInteger(text.SubString(5,8)); // 3 digits
      scripts_count = StringToInteger(text.SubString(9,12)); // 3 digits
      ProgressBar("Pre-install...", script_number, scripts_count, "/" + scripts_count);
   } else if (command == "imag") {
      step_imaging.sprite.SetOpacity(1.0);
      progress_arg = StringToInteger(text.SubString(5,8)); // 3 digits
      progress_max = StringToInteger(text.SubString(9,12)); // 3 digits
      ProgressBar("Imaging...", progress_arg, progress_max, "%");
   } else if (command == "boot") {
      step_bootloader.sprite.SetOpacity(1.0);
      ProgressBar("Bootloader...", "", 0, "");
   } else if (command == "post") {
      step_postinstall.sprite.SetOpacity(1.0);
      script_number = StringToInteger(text.SubString(5,8)); // 3 digits
      scripts_count = StringToInteger(text.SubString(9,12)); // 3 digits
      ProgressBar("Post-install...", script_number, scripts_count, "/" + scripts_count);
   } else if (command == "dlgb") {
      // Dialog box
      dlgb_type = text.SubString(5,8); // "yes" or " no" or "zzz" or "off"
      dlgb_text = text.SubString(9, 256); // Message to display
      DialogBox(dlgb_type, dlgb_text);
   } else if (command == "conf") {
      var = text.SubString(5,8);
      if ( var == "sys" ) {
          val = text.SubString(9,10);
          if (val == "Y") {
             display_system_messages=1;
          } else {
             display_system_messages=0;
          }
      } else
          scroll_message("W", "Unkown config parameter: [" + var + "]");
   } else
      scroll_message("S", text); // pass non formatted messages (system) to the
      // scroll_message that knows how to handle it (is handled at the beginnig
      // of this function, but in case we have a messages with ":" in 5th place
      // that is not an SIS message, we'll end here. so we trap everything
      // unhandled here.
}

fun display_password_callback (prompt_text, num_bullets)
{
    DialogBox("pwd", prompt_text + "\n" + bullets.SubString(0,num_bullets));
}

fun display_normal_callback ()
{
    DialogBox("off", "");
}

Plymouth.SetMessageFunction(scroll_message_callback); // SetDisplayMessageFunction not available in 0.8.4 (CentOS-6)
Plymouth.SetUpdateStatusFunction(update_status_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetDisplayNormalFunction(display_normal_callback);

